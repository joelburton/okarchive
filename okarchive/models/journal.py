"""Model for Journals."""

from sqlalchemy import (
    Column,
    String,
)

from pyramid.security import Allow, Everyone

from . import Base, DBSession
from .post import Post

class Journal(Base):
    """Journal."""

    __tablename__ = 'journals'

    @property
    def __name__(self):
        return self.name

    @property
    def __parent__(self):
        from .journals import journals
        return journals

    @property
    def __acl__(self):
        """Permisssions."""

        return [(Allow, Everyone, 'view'),
                (Allow, 'group:editors', ('edit', 'add', 'delete')),
                (Allow, self.name, ('edit', 'add', 'delete')),
        ]

    def __getitem__(self, key):
        """Get post by key.

        :rtype: :py:class:`.post.Post`
        """

        # Optimization: since we might be transvered by a view name, let's
        # fail without even checking the database.
        if type(key)==str and not key.isdigit():
            raise KeyError('Not an integer')

        post = (DBSession
                .query(Post)
                .filter_by(id=key)
                .filter_by(journal_name=self.name)
                .first())
        if not post:
            raise KeyError('No such post: {}'.format(key))
        return post

    def __delitem__(self, key):
        """Delete post."""

        self.posts.remove(self[key])

    def values(self):
        """List of posts."""

        return [p for p in self.posts]

    def keys(self):
        """List of post IDs."""

        return [p.id for p in self.posts]

    def items(self):
        """List of (journal-name, journal) tuples."""

        return [(p.id, p) for p in self.posts]


    name = Column(
        String,
        primary_key=True,
        doc='Journal name; this is the same as the user who created it.',
    )

    def add_post(self,
                 post=None,
                 _flush=False,
                 **kw
    ):
        """Add post to journal.

        Either ``post`` or ``**kw`` should be given. If ``post`` is given,
        keywords are ignored.

        :param post: *(optional)* already-created :py:class:`.post.Post` object.
        :param \*\*kw: *(optional)* parameters for creating
          :py:class:`.post.Post` object.
        :param _flush: *(optional)* auto-flush database after
           adding; this is useful to get the autogenerated post ID.
        :returns: newly created Post.
        """

        if not post:
            post = Post(journal_name=self.name, **kw)
        else:
            post.journal_name = self.name
        DBSession.add(post)
        if _flush:
            DBSession.flush()
        return post


